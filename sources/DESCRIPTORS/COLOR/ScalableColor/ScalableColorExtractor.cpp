#include "ScalableColorExtractor.h"

ScalableColorExtractor::ScalableColorExtractor() {
    descriptor = new ScalableColor();
}

Descriptor * ScalableColorExtractor::extract(Image & image, const char ** params) {
    try {
        descriptor->loadParameters(params);
    }
    catch (ErrorCode exception) {
        throw exception;
    }

    /* Calculate histogram in HSV color space */
    int * histogram = new int[256] {0};

    int imageHeight = image.getHeight();
    int imageWidth  = image.getWidth();
    int imageSize   = image.getSize();

    unsigned char * rgb = image.getRGB();

    // Quantization parameters:
    int hue_quant = 16;
    int sat_quant = 4;
    int val_quant = 4;

    // test - loop over all pixels and save their value s to local file:
    FILE * file = fopen("test.txt", "w");
    if (file == nullptr) {
        printf("Error opening file!\n");
        return nullptr;
    }

    for (int i = 0; i < imageSize; i++) {
        fprintf(file, "%d %d %d\n", rgb[3 * i], rgb[3 * i + 1], rgb[3 * i + 2]);
    }

    for (int i = 0; i < imageSize; i++) {
        // Calculate quantized hsv values for current pixel
        int * hsv_quantized = rgb2hsv(rgb[3 * i], rgb[3 * i + 1], rgb[3 * i + 2], hue_quant, sat_quant, val_quant);

        // Calculating histogram index
        histogram[hsv_quantized[2] * 4 * 16 + hsv_quantized[1] * 16 + hsv_quantized[0]]++;

        delete hsv_quantized;
    }

    delete[] rgb;

    /* Cut to 11 bit precision */
    int factor = 0x7ff;  // 11
    double binaryValue;
    int integerBinaryValue;

    for (int i = 0; i < 256; i++) {
        binaryValue = (double) (factor) * (double) (histogram[i]) / (double) (imageHeight*imageWidth);
        integerBinaryValue = static_cast<int>(binaryValue + 0.49999);

        if (integerBinaryValue > factor) {
            integerBinaryValue = factor;
        }
        histogram[i] = integerBinaryValue;
    }

    /* ISO table quantization */
    for (unsigned int i = 0; i < 256; i++) {
        histogram[i] =         histogram[i] == 0    ? 0  :
        histogram[i] >= 1   && histogram[i] <= 2    ? 1  :
        histogram[i] >= 3   && histogram[i] <= 9    ? 2  :
        histogram[i] >= 10  && histogram[i] <= 21   ? 3  :
        histogram[i] >= 22  && histogram[i] <= 40   ? 4  :
        histogram[i] >= 41  && histogram[i] <= 66   ? 5  :
        histogram[i] >= 67  && histogram[i] <= 101  ? 6  :
        histogram[i] >= 102 && histogram[i] <= 144  ? 7  :
        histogram[i] >= 145 && histogram[i] <= 197  ? 8  :
        histogram[i] >= 198 && histogram[i] <= 261  ? 9  :
        histogram[i] >= 262 && histogram[i] <= 335  ? 10 :
        histogram[i] >= 336 && histogram[i] <= 421  ? 11 :
        histogram[i] >= 422 && histogram[i] <= 519  ? 12 :
        histogram[i] >= 520 && histogram[i] <= 629  ? 13 :
        histogram[i] >= 630 && histogram[i] <= 752  ? 14 :
        histogram[i] >= 753 && histogram[i] <= 2047 ? 15 : histogram[i];
    }

    /* Haar transform */
    int matrix[16][16];
    int i, j, sum, dif, x1, y1, x2, y2;
    int tablae = 255;

    for (int i = 0; i < hue_quant * sat_quant * val_quant; ++i) {
        matrix[i % (hue_quant)][i / (hue_quant)] = histogram[i];
    }

    for (int i = 0; i < tablae; ++i) {
        y1 = tabelle[0][i];
        x1 = tabelle[1][i];
        y2 = tabelle[2][i];
        x2 = tabelle[3][i];

        sum = matrix[y1][x1] + matrix[y2][x2];
        dif = matrix[y2][x2] - matrix[y1][x1];

        matrix[y1][x1] = sum;
        matrix[y2][x2] = dif;
    }

    for (int i = 0; i < hue_quant * sat_quant * val_quant; ++i) {
        histogram[i] = matrix[i % (hue_quant)][i / (hue_quant)];
    }

    int index;

    int max_color = 256;

    int * histogram_out = new int[max_color];

    for (j = 0; j < 256; ++j) {
        index = sorttab[j];
        histogram_out[j] = histogram[index];
    }

    int wert, maxwert;

    for (i = 0; i < 256; ++i) {
        maxwert = scalableColorQuantValues[i][2];

        wert = histogram_out[i] - scalableColorQuantValues[i][0];

        if (wert > maxwert) {
            wert = maxwert;
        }

        if (wert < -maxwert) {
            wert = -maxwert;
        }
        histogram_out[i] = wert;
    }

    /* Bit skipping */
    int bits_pro_bin, bits_pro_bild;
    int max_bits_pro_bin, anzkof;

    bits_pro_bild = 0;
    max_bits_pro_bin = 0;
    anzkof = 0;

    int bitsDisc  = descriptor->getNumberOfBitplanesDiscarded();
    int coeffNumb = descriptor->getNumberOfCoefficients();

    if (bitsDisc > 0) {
        int wert, wert1;
        for (int i = 0; i < 256; ++i) {
            bits_pro_bin = scalableColorQuantValues[i][1] - bitsDisc;

            if (bits_pro_bin < 2) {
                wert = histogram_out[i];

                if (wert >= 0) {
                    histogram_out[i] = 1;
                }

                if (wert < 0) {
                    histogram_out[i] = 0;
                }

                bits_pro_bild = bits_pro_bild + 1;
            }
            if (bits_pro_bin >= 2) {
                wert = histogram_out[i];
                wert1 = wert;

                if (wert < 0) {
                    wert = -wert;
                }

                bits_pro_bild = bits_pro_bild + bits_pro_bin;

                if (bits_pro_bin > max_bits_pro_bin) {
                    max_bits_pro_bin = bits_pro_bin;
                }

                anzkof = anzkof + 1;

                for (j = 0; j < bitsDisc; ++j) {
                    wert = wert >> 1;
                }

                if (wert1 < 0) {
                    wert = -wert;
                }
                histogram_out[i] = wert;
            }
        }
    }

    /* Save coefficients */
    for (int i = 0; i < 256; i++) {
        histogram[i] = histogram_out[i];
    }

    delete histogram_out;

    descriptor->allocateCoefficients(coeffNumb);

    // Get pointer to coefficients array:
    int * coefficients = descriptor->getCoefficients();

    for (int i = 0; i < coeffNumb; i++) {
        coefficients[i] = histogram[i];
    }

    delete histogram;

    return descriptor;
}

int * ScalableColorExtractor::rgb2hsv(int r, int g, int b, int hue_quant, int sat_quant, int val_quant) {
    int max, min;
    static char order;
    double h;
    int s, v;

    if (g > b) {
        if (r > g) {
            max = r;
            min = b;
            order = 0;
        }
        else {
            if (b > r) {
                max = g;
                min = r;
                order = 1;
            }
            else {
                max = g;
                min = b;
                order = 2;
            }
        }
    }
    else {
        if (r > b) {
            max = r;
            min = g;
            order = 3;
        }
        else {
            if (g > r) {
                max = b;
                min = r;
                order = 4;
            }
            else {
                max = b;
                min = g;
                order = 5;
            }
        }
    }

    if (!max) {
        h = 0;
        s = 0;
        v = 0;
    }

    v = max;

    if (max == 0) s = 0;
    else
        s = ((max - min) * 255) / max;

    if (max == min) {
        h = 0;
    }

    switch (order) {
        case 0:
            h = 1.0 - (double) (r - g) / (double) (r - b); break;
        case 1:
            h = 3.0 - (double) (g - b) / (double) (g - r); break;
        case 2:
            h = 1.0 + (double) (g - r) / (double) (g - b); break;
        case 3:
            h = 5.0 + (double) (r - b) / (double) (r - g); break;
        case 4:
            h = 3.0 + (double) (b - g) / (double) (b - r); break;
        case 5:
            h = 5.0 - (double) (b - r) / (double) (b - g); break;
        default:
            h = 0.0;
    }

    int * HSV = new int[3];

    HSV[0] = ((static_cast<int> (h / 6 * 255)) * hue_quant) / 256;
    HSV[1] = (s * sat_quant) / 256;
    HSV[2] = (v * val_quant) / 256;

    return HSV;
}

ScalableColorExtractor::~ScalableColorExtractor() {
    delete descriptor;
}

const double ScalableColorExtractor::H[16][16] = {
{ 0.25000,  0.25000,  0.25000,  0.25000,
  0.25000,  0.25000,  0.25000,  0.25000,
 -0.25000, -0.25000, -0.25000, -0.25000,
 -0.25000, -0.25000, -0.25000, -0.25000 },

{ 0.35355,  0.35355,  0.35355,  0.35355,
 -0.35355, -0.35355, -0.35355, -0.35355,
  0.00000,  0.00000,  0.00000,  0.00000,
  0.00000,  0.00000,  0.00000,  0.00000 },

{ 0.00000,  0.00000,  0.00000,  0.00000,
  0.00000,  0.00000,  0.00000,  0.00000,
  0.35355,  0.35355,  0.35355,  0.35355,
 -0.35355, -0.35355, -0.35355, -0.35355 },

{ 0.50000,  0.50000, -0.50000, -0.50000,
  0.00000,  0.00000,  0.00000,  0.00000,
  0.00000,  0.00000,  0.00000,  0.00000,
  0.00000,  0.00000,  0.00000,  0.00000 },

{ 0.00000,  0.00000,  0.00000,  0.00000,
  0.50000,  0.50000, -0.50000, -0.50000,
  0.00000,  0.00000,  0.00000,  0.00000,
  0.00000,  0.00000,  0.00000,  0.00000 },

{ 0.00000,  0.00000,  0.00000,  0.00000,
  0.00000,  0.00000,  0.00000,  0.00000,
  0.50000,  0.50000, -0.50000, -0.50000,
  0.00000,  0.00000,  0.00000,  0.00000 },

{ 0.00000,  0.00000,  0.00000,  0.00000,
  0.00000,  0.00000,  0.00000,  0.00000,
  0.00000,  0.00000,  0.00000,  0.00000,
  0.50000,  0.50000, -0.50000, -0.50000 },

{ 0.70711, -0.70711,  0.00000,  0.00000,
  0.00000,  0.00000,  0.00000,  0.00000,
  0.00000,  0.00000,  0.00000,  0.00000,
  0.00000,  0.00000,  0.00000,  0.00000 },

{ 0.00000,  0.00000,  0.70711, -0.70711,
  0.00000,  0.00000,  0.00000,  0.00000,
  0.00000,  0.00000,  0.00000,  0.00000,
  0.00000,  0.00000,  0.00000,  0.00000 },

{ 0.00000,  0.00000,  0.00000,  0.00000,
  0.70711, -0.70711,  0.00000,  0.00000,
  0.00000,  0.00000,  0.00000,  0.00000,
  0.00000,  0.00000,  0.00000,  0.00000 },

{ 0.00000,  0.00000,  0.00000,  0.00000,
  0.00000,  0.00000,  0.70711, -0.70711,
  0.00000,  0.00000,  0.00000,  0.00000,
  0.00000,  0.00000,  0.00000,  0.00000 },

{ 0.00000,  0.00000,  0.00000,  0.00000,
  0.00000,  0.00000,  0.00000,  0.00000,
  0.70711, -0.70711,  0.00000,  0.00000,
  0.00000,  0.00000,  0.00000,  0.00000 },

{ 0.00000,  0.00000,  0.00000,  0.00000,
  0.00000,  0.00000,  0.00000,  0.00000,
  0.00000,  0.00000,  0.70711, -0.70711,
  0.00000,  0.00000,  0.00000,  0.00000 },

{ 0.00000,  0.00000,  0.00000,  0.00000,
  0.00000,  0.00000,  0.00000,  0.00000,
  0.00000,  0.00000,  0.00000,  0.00000,
  0.70711, -0.70711,  0.00000,  0.00000 },

{ 0.00000,  0.00000,  0.00000,  0.00000,
  0.00000,  0.00000,  0.00000,  0.00000,
  0.00000,  0.00000,  0.00000,  0.00000,
  0.00000,  0.00000,  0.70711, -0.70711 } };

const int ScalableColorExtractor::tabelle[5][255] = {
{ 0, 2, 4, 6, 8, 10, 12, 14, 0, 2, 4, 6, 8, 10, 12, 14,
  0, 2, 4, 6, 8, 10, 12, 14, 0, 2, 4, 6, 8, 10, 12, 14,
  0, 2, 4, 6, 8, 10, 12, 14, 0, 2, 4, 6, 8, 10, 12, 14,
  0, 2, 4, 6, 8, 10, 12, 14, 0, 2, 4, 6, 8, 10, 12, 14,
  0, 2, 4, 6, 8, 10, 12, 14, 0, 2, 4, 6, 8, 10, 12, 14,
  0, 2, 4, 6, 8, 10, 12, 14, 0, 2, 4, 6, 8, 10, 12, 14,
  0, 2, 4, 6, 8, 10, 12, 14, 0, 2, 4, 6, 8, 10, 12, 14,
  0, 2, 4, 6, 8, 10, 12, 14, 0, 2, 4, 6, 8, 10, 12, 14,
  0, 2, 4, 6, 8, 10, 12, 14, 0, 2, 4, 6, 8, 10, 12, 14,
  0, 2, 4, 6, 8, 10, 12, 14, 0, 2, 4, 6, 8, 10, 12, 14,
  0, 2, 4, 6, 8, 10, 12, 14, 0, 2, 4, 6, 8, 10, 12, 14,
  0, 2, 4, 6, 8, 10, 12, 14, 0, 2, 4, 6, 8, 10, 12, 14,
  0, 2, 4, 6, 8, 10, 12, 14, 0, 2, 4, 6, 8, 10, 12, 14,
  0, 2, 4, 6, 8, 10, 12, 14, 0, 2, 4, 6, 8, 10, 12, 14,
  0, 4, 8, 12, 0, 4, 8, 12, 0, 4, 8, 12, 0, 4, 8, 12,
  0, 4, 8, 12, 0, 4, 8, 12, 0, 4, 8, 12, 0, 8, 0 },

{ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1,
  2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
  4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5,
  6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7,
  8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9,
  10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11,
  12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13,
  14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15,
  0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2,
  4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 6, 6,
  8, 8, 8, 8, 8, 8, 8, 8, 10, 10, 10, 10, 10, 10, 10, 10,
  12, 12, 12, 12, 12, 12, 12, 12, 14, 14, 14, 14, 14, 14, 14, 14,
  0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2,
  8, 8, 8, 8, 8, 8, 8, 8, 10, 10, 10, 10, 10, 10, 10, 10,
  0, 0, 0, 0, 2, 2, 2, 2, 8, 8, 8, 8, 10, 10, 10, 10,
  0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0 },

{ 1,  3, 5, 7, 9, 11, 13, 15, 1, 3, 5, 7, 9, 11, 13, 15, 1, 3, 5, 7, 9, 11,
  13, 15, 1, 3, 5, 7, 9, 11, 13, 15, 1, 3, 5, 7, 9, 11, 13, 15, 1, 3, 5, 7,
  9, 11, 13, 15, 1, 3, 5, 7, 9, 11, 13, 15, 1, 3, 5, 7, 9, 11, 13, 15, 1, 3,
  5, 7, 9, 11, 13, 15, 1, 3, 5, 7, 9, 11, 13, 15, 1, 3, 5, 7, 9, 11, 13, 15,
  1, 3, 5, 7, 9, 11, 13, 15, 1, 3, 5, 7, 9, 11, 13, 15, 1, 3, 5, 7, 9, 11,
  13, 15, 1, 3, 5, 7, 9, 11, 13, 15, 1, 3, 5, 7, 9, 11, 13, 15, 0, 2, 4, 6,
  8, 10, 12, 14, 0, 2, 4, 6, 8, 10, 12, 14, 0, 2, 4, 6, 8, 10, 12, 14, 0, 2,
  4, 6, 8, 10, 12, 14, 0, 2, 4, 6, 8, 10, 12, 14, 0, 2, 4, 6, 8, 10, 12, 14,
  0, 2, 4, 6, 8, 10, 12, 14, 0, 2, 4, 6, 8, 10, 12, 14, 0, 2, 4, 6, 8, 10,
  12, 14, 0, 2, 4, 6, 8, 10, 12, 14, 0, 2, 4, 6, 8, 10, 12, 14, 0, 2, 4, 6,
  8, 10, 12, 14, 2, 6, 10, 14, 2, 6, 10, 14, 2, 6, 10, 14, 2, 6, 10, 14, 0, 4,
  8, 12, 0, 4, 8, 12, 0, 4, 8, 12, 4, 12, 8 },

{ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2,
  2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5,
  5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8,
  8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10,
  11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13,
  13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 1, 1, 1, 1,
  1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7,
  7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 9, 9, 9, 9, 11, 11, 11, 11, 11, 11, 11, 11,
  13, 13, 13, 13, 13, 13, 13, 13, 15, 15, 15, 15, 15, 15, 15, 15, 4, 4, 4, 4, 4, 4,
  4, 4, 6, 6, 6, 6, 6, 6, 6, 6, 12, 12, 12, 12, 12, 12, 12, 12, 14, 14, 14, 14,
  14, 14, 14, 14, 0, 0, 0, 0, 2, 2, 2, 2, 8, 8, 8, 8, 10, 10, 10, 10, 2, 2,
  2, 2, 10, 10, 10, 10, 8, 8, 8, 8, 0, 0, 0 },

{ 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
  128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
  128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
  128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
  128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
  128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
  128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
  128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
  128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
  128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
  128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
  128, 128, 128, 128, 128, 128, 128, 64, 64, 64, 64,
  64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
  64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
  64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 32, 32, 32, 32, 32, 32,
  32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
  32, 32, 32, 32, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 8, 8,
  8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 2, 2, 1 }
};

const int ScalableColorExtractor::sorttab[256] = {
0, 4, 8, 12, 32, 36, 40, 44, 128, 132, 136, 140, 160, 164, 168, 172,
2, 6, 10, 14, 34, 38, 42, 46, 130, 134, 138, 142, 162, 166, 170, 174,
64, 66, 68, 70, 72, 74, 76, 78, 96, 98, 100, 102, 104, 106, 108, 110,
192, 194, 196, 198, 200, 202, 204, 206, 224, 226, 228, 230, 232, 234, 
236, 238, 16, 18, 20, 22, 24, 26, 28, 30, 48, 50, 52, 54, 56, 58, 60, 
62, 80, 82, 84, 86, 88, 90, 92, 94, 112, 114, 116, 118, 120, 122, 124, 
126, 144, 146, 148, 150, 152, 154, 156, 158, 176, 178, 180, 182, 184, 
186, 188, 190, 208, 210, 212, 214, 216, 218, 220, 222, 240, 242, 244, 
246, 248, 250, 252, 254, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 
27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 
63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 
99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 
129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 
159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 
189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 
219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255 };

const int ScalableColorExtractor::scalableColorQuantValues[256][3] = {
{ 217, 9, 255 }, { -71, 9, 255 }, { -27, 8, 127 }, { -54, 9, 255 }, { -8, 7, 63  }, { -14, 7, 63 }, { -22, 7, 63 }, 
{ -29, 8, 127 }, { -6, 6, 31   }, { -13, 7, 63  }, { -11, 6, 31  }, { -22, 7, 63 }, { -9, 7, 63  }, { -14, 7, 63 }, 
{ -19, 7, 63  }, { -22, 7, 63  }, { 0, 4, 7     }, { -1, 5, 15   }, { 0, 3, 3    }, { -2, 6, 31  }, { 1, 5, 15   }, 
{ -5, 6, 31 }, { 0, 5, 15 }, { 0, 7, 63 }, { 2, 5, 15 }, { -2, 6, 31 }, { -2, 5, 15 }, { 0, 7, 63 }, { 3, 5, 15 }, 
{ -5, 6, 31 }, { -1, 6, 31 }, { 4, 7, 63 },{ 0, 3, 3 }, { 0, 3, 3 }, { 0, 3, 3 }, { -1, 5, 15 }, { 0, 3, 3 }, { 0, 3, 3 }, 
{ -1, 5, 15 }, { -2, 5, 15 }, { -1, 5, 15 }, { -1, 4, 7 }, { -1, 5, 15 }, { -3, 5, 15 }, { -1, 5, 15 }, { -2, 5, 15 }, 
{ -4, 5, 15 }, { -5, 5, 15 }, { -1, 5, 15 }, { 0, 3, 3 }, { -2, 5, 15 }, { -2, 5, 15 }, { -2, 5, 15 }, { -3, 5, 15 }, { -3, 5, 15 }, { 0, 5, 15 },
{ 0, 5, 15 }, { 0, 5, 15 }, { 0, 5, 15 }, { 2, 5, 15 }, { -1, 5, 15 }, { 0, 5, 15 }, { 3, 6, 31 }, { 3, 5, 15 },
{ 0, 2, 1 }, { 0, 2, 1 }, { 0, 3, 3 }, { 0, 4, 7 }, { 0, 2, 1 }, { 0, 2, 1 }, { 0, 3, 3 }, { -1, 4, 7 },
{ -1, 4, 7 }, { -1, 4, 7 }, { -2, 5, 15 }, { -1, 5, 15 }, { -2, 5, 15 }, { -2, 5, 15 }, { -2, 5, 15 }, { -1, 5, 15 },
{ 0, 3, 3 }, { 0, 2, 1 }, { 0, 3, 3 }, { -1, 4, 7 }, { 0, 2, 1 }, { 0, 3, 3 }, { -1, 4, 7 }, { -1, 5, 15 },
{ -2, 5, 15 }, { -1, 4, 7 }, { -2, 5, 15 }, { -1, 5, 15 }, { -3, 5, 15 }, { -3, 5, 15 }, { -2, 5, 15 }, { 0, 5, 15 },
{ 0, 3, 3 }, { 0, 3, 3 }, { 0, 3, 3 }, { -1, 4, 7 }, { 0, 3, 3 }, { 0, 3, 3 }, { -2, 5, 15 }, { -2, 5, 15 },
{ -2, 5, 15 }, { -2, 4, 7 }, { -2, 5, 15 }, { -1, 5, 15 }, { -3, 5, 15 }, { -3, 5, 15 }, { -1, 5, 15 }, { 0, 5, 15 },
{ 1, 4, 7 }, { 0, 3, 3 }, { 0, 4, 7 }, { -1, 4, 7 }, { 0, 3, 3 }, { 0, 4, 7 }, { -1, 4, 7 }, { 0, 4, 7 },
{ -1, 4, 7 }, { -1, 3, 3 }, { -1, 4, 7 }, { 0, 4, 7 }, { -1, 5, 15 }, { 0, 5, 15 }, { 1, 5, 15 }, { -1, 5, 15 },
{ 0, 2, 1 }, { 0, 2, 1 }, { 0, 3, 3 }, { 0, 3, 3 }, { 0, 2, 1 }, { 0, 2, 1 }, { 0, 3, 3 }, { 0, 3, 3 },
{ 0, 2, 1 }, { 0, 2, 1 }, { 0, 3, 3 }, { 0, 4, 7 }, { 0, 2, 1 }, { 0, 2, 1 }, { 0, 3, 3 }, { 0, 3, 3 },
{ 0, 3, 3 }, { 0, 2, 1 }, { 0, 3, 3 }, { 1, 4, 7 }, { 0, 2, 1 }, { 0, 3, 3 }, { -1, 4, 7 }, { 1, 4, 7 },
{ 0, 3, 3 }, { 0, 3, 3 }, { 0, 3, 3 }, { 0, 4, 7 }, { 0, 3, 3 }, { 0, 3, 3 }, { -1, 4, 7 }, { 0, 4, 7 },
{ 0, 3, 3 }, { 0, 2, 1 }, { 0, 3, 3 }, { 0, 3, 3 }, { 0, 2, 1 }, { 0, 2, 1 }, { 0, 3, 3 }, { 0, 3, 3 },
{ 0, 3, 3 }, { 0, 2, 1 }, { 0, 3, 3 }, { 1, 4, 7 }, { 0, 2, 1 }, { 0, 3, 3 }, { 0, 4, 7 }, { 1, 4, 7 },
{ 0, 3, 3 }, { 0, 2, 1 }, { 0, 3, 3 }, { 1, 5, 15 }, { 0, 3, 3 }, { 0, 3, 3 }, { -1, 5, 15 }, { 2, 5, 15 },
{ 0, 3, 3 }, { 0, 3, 3 }, { 0, 3, 3 }, { 0, 4, 7 }, { 0, 3, 3 }, { 0, 3, 3 }, { -1, 4, 7 }, { 1, 5, 15 },
{ 0, 3, 3 }, { 0, 2, 1 }, { 0, 3, 3 }, { 0, 3, 3 }, { 0, 2, 1 }, { 0, 3, 3 }, { 0, 4, 7 }, { 0, 4, 7 },
{ 0, 3, 3 }, { 0, 2, 1 }, { 0, 3, 3 }, { 1, 4, 7 }, { 0, 3, 3 }, { 0, 3, 3 }, { -1, 5, 15 }, { 1, 5, 15 },
{ 0, 3, 3 }, { 0, 2, 1 }, { -1, 3, 3 }, { 1, 5, 15 }, { 0, 3, 3 }, { -1, 4, 7 }, { -1, 5, 15 }, { 2, 5, 15 },
{ 0, 3, 3 }, { 0, 3, 3 }, { 0, 3, 3 }, { 0, 4, 7 }, { 0, 3, 3 }, { -1, 3, 3 }, { 0, 4, 7 }, { 1, 4, 7 },
{ 1, 3, 3 }, { 0, 2, 1 }, { -1, 3, 3 }, { 0, 3, 3 }, { 0, 3, 3 }, { 0, 3, 3 }, { 0, 3, 3 }, { 1, 4, 7 },
{ 0, 3, 3 }, { 0, 2, 1 }, { -1, 3, 3 }, { 0, 4, 7 }, { 0, 3, 3 }, { 0, 3, 3 }, { 0, 4, 7 }, { 1, 4, 7 },
{ 0, 3, 3 }, { 0, 2, 1 }, { 0, 3, 3 }, { 0, 4, 7 }, { 0, 3, 3 }, { -1, 3, 3 }, { 0, 4, 7 }, { 1, 4, 7 },
{ 0, 3, 3 }, { 0, 3, 3 }, { 0, 3, 3 }, { 0, 3, 3 }, { 0, 3, 3 }, { -1, 3, 3 }, { 0, 3, 3 }, { -1, 4, 7 }
};